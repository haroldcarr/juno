* intro

I am using this fork of Juno to learn and experiment with
- blockchain
- Raft
- Haskell

* changes made since forking (latest at top)

- run in docker (to avoid zmq problem -- see below)
- bumped stack LTS to latest
- removed some global HLint ignores and fixed warnings
- removed Persistence.SQLite
- removed Consensus.Api and Juno.Runtime.Api.ApiServer (for now)
- removed all Hopper related code

* background

- Paxos : consensus in a network of unreliable processors
  - https://en.wikipedia.org/wiki/Paxos_(computer_science)
  - but hard to understand, thus Raft:

- Raft : "equivalent" to Paxos, but understandable
  - https://raft.github.io/
  - https://raft.github.io/raft.pdf
  - but Byzantine servers break Raft, thus: Tangaroa:

- Tangaroa : Byzantine Fault Tolerant Raft
  - [[http://www.scs.stanford.edu/14au-cs244b/labs/projects/copeland_zhong.pdf]]
  - [[https://github.com/chrisnc/tangaroa]]
  - "Practical Byzantine Fault Tolerance", Miguel Castro and Barbara Liskov
    - http://pmg.csail.mit.edu/papers/osdi99.pdf
  - just does consensus, not smart contracts, thus Juno:

- Juno : Smart Contracts Running on a BFT Hardened Raft
  - https://github.com/kadena-io/juno

See the [[./z-no-longer-used/README-KADENA.md][original README]] (and also for instructions to run with tmux and rlwrap).

* requirements

Install [[http://zeromq.org/][zeromq]] < 5.

#+begin_example
# Mac OS:
brew install zeromq
#+end_example

* build, run, terminate

** build

#+begin_example
stack test
#+end_example

** run

In a terminal:

#+begin_example
./run/xserver.sh > /tmp/JUNO-LOGS
#+end_example

In a different terminal:

#+begin_example
./run/xclient.sh
#+end_example

In the client terminal, interact as shown (=`# =>`= added to indicate what client returns):

#+begin_example
showone foo
# => Nothing

create foo
# => Created Account: "foo"

showone foo
# => Just 0

adjust foo 200
# => Adjusted Account "foo" by 200

showone foo
# => Just 200

create bar
# => Created Account: "bar"

showall
# =>
Account: Amount
----------------------
bar: 1.01
foo: 198.99
#+end_example

** termination

Do =^C= in both terminals. Then:

#+begin_example
rm /tmp/JUNO-LOGS
#+end_example

* running on mac

- ZEROMQ problem

on my mac running 10.11.6 El Capitan I get this when running =run/xserver.sh= :

#+begin_example
Thread 3 Crashed:
0   libsystem_kernel.dylib        	0x00007fff850eff06 __pthread_kill + 10
1   libsystem_pthread.dylib       	0x00007fff88a9b4ec pthread_kill + 90
2   libsystem_c.dylib             	0x00007fff91fa76df abort + 129
3   libzmq.5.dylib                	0x000000011005318b zmq::zmq_abort(char const*) + 9
4   libzmq.5.dylib                	0x00000001100564fb zmq::kqueue_t::kevent_add(int, short, void*) + 145
5   libzmq.5.dylib                	0x0000000110053aec zmq::io_thread_t::io_thread_t(zmq::ctx_t*, unsigned int) + 210
6   libzmq.5.dylib                	0x000000011004b184 zmq::ctx_t::create_socket(int) + 858
7   libzmq.5.dylib                	0x000000011007da4b zmq_socket + 41
8   junoserver                    	0x000000010e059253 0x10db32000 + 5403219
#+end_example

To work around it, I put

#+begin_example
docker:
    enable: true
#+end_example

in =stack.yaml= so things run in a docker container (that does not exhibit the problem).


